{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","class","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAMC,UAAU,iBAAhB,UACE,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACpB,6BACKL,EAAMI,QAAQE,OAEnB,4BACKN,EAAMI,QAAQG,YCJdC,G,MAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC3B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLdM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOC,MAAM,SAASC,KAAK,SAASH,YAAaA,EAAaI,SAAUH,MCsC7DI,E,kDApCb,aAAc,IAAD,8BACX,gBAeFJ,aAAc,SAAAK,GACZ,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAfpC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAc,IAJL,E,qDASb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAASmB,S,oBAQzC,WAAS,IAAD,EAE2BC,KAAKN,MAA9Bd,EAFF,EAEEA,SAAUW,EAFZ,EAEYA,YACXU,EAAmBrB,EAASsB,QAAO,SAAAtB,GAAQ,OAAGA,EAASH,KAAK0B,cAAcC,SAASb,EAAYc,wBAGrG,OACC,sBAAKjC,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAcgB,KAAKhB,eAC5D,cAAC,EAAD,CAAUJ,SAAUqB,W,GA/BVK,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c86cd654.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.styles.css\"\r\n\r\nexport const Card = props => (\r\n    <div  className=\"card-container\">\r\n      <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n        <h2>\r\n            {props.monster.name}\r\n        </h2>\r\n        <p>\r\n            {props.monster.email}\r\n        </p>\r\n    </div>\r\n    )","import React from \"react\";\r\nimport {Card} from \"../card/card.component\";\r\nimport \"./card-list-styles.css\";\r\n\r\n\r\n\r\nexport const CardList = props => (\r\n    <div className=\"card-list\">\r\n        {props.monsters.map(monster => ( \r\n        <Card key={monster.id} monster={monster}/>\r\n        ))}\r\n    </div>\r\n);","import React from \"react\";\r\nimport './search-box.style.css';\r\n\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input class=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange}/>\r\n);\r\n\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport {CardList} from \"./components/card-list/card-list.component\";\nimport {SearchBox} from \"./components/search-box/search-box\"\n\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchField : \"\"\n    };\n \n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters:users}))\n    \n  }\n\n  handleChange =e=>{\n    this.setState({searchField:e.target.value});\n  }\n\n  render(){\n\n     const {monsters, searchField} = this.state;\n     const filteredMonsters = monsters.filter(monsters=> monsters.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n     )\n\n     return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox placeholder=\"search monsters\" handleChange={this.handleChange} />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}